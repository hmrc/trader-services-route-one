# Copyright 2024 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.http.filters = "uk.gov.hmrc.traderservices.wiring.MicroserviceFilters"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

appName = "trader-services-route-one"
play.http.router = prod.Routes
play.modules.enabled += "MicroserviceModule"

controllers {

  uk.gov.hmrc.traderservices.controllers.TraderServicesController {
    needsAuditing = true
    needsLogging = true
  }
}

microservice {

  services {

    auth {
      host = localhost
      port = 8500
    }

    file-transfer {
      url = "http://localhost:10003/transfer-file"
    }

    multi-file-transfer {
      url = "http://localhost:10003/transfer-multiple-files"
    }

    eis {
      cpr {
        caserequest.route1 {
          host = localhost
          port = 9382
          token = "TBC"
          environment = "stub"
          create {
            path = "/cpr/caserequest/route1/create/v1"
          }
          update {
            path = "/cpr/caserequest/route1/update/v1"
          }
        }
      }
    }
  }
}


auditing {
  enabled = true
}

controllers {

  confidenceLevel = 50
}

mongodb {
  uri = "mongodb://localhost:27017/trader-services"

  failoverStrategy {
    initialDelayMsecs = 100
    retries = 10
    delay {
      factor = 1.25
      function = fibonacci
    }
  }
}

mongo-async-driver {
  pekko {
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off
    loglevel = "WARNING"
  }
}

authorisedServiceName = "HMRC-CUS-ORG"
authorisedIdentifierKey = "EORINumber"

pekko.http {
  host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.s
    max-connections = 32
    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    max-open-requests = 128
  }

  client {
    parsing.max-content-length = 20m
    user-agent-header = ${appName}
    log-unencrypted-network-bytes = off
  }
}

play.server {
  # How long a request takes until it times out. Set to null or "infinite" to disable the timeout.
  pekko.requestTimeout = 5 minutes
}

# The total time you accept a request to take (it will be interrupted even if the remote host is still sending data) (default is 120 seconds)
play.ws.timeout.request = 5 minutes

features {
  transferFilesAsync = on
}

logger.json.data.prefix = "route1.backend"
